@mixin _oTypographyFontSize($scale, $progressive-font-adjust: 1) {
	@if type-of($scale) == map {
		@each $breakpoint, $number in $scale {
			@include oGridRespondTo($breakpoint) {
				@if type-of($number) == list {
					font-size: _oTypographyFontSizeFromScale(nth($number, 1), $progressive-font-adjust);
				} @else {
					font-size: _oTypographyFontSizeFromScale($number, $progressive-font-adjust);
				}
			}
		}
	} @else {
		font-size: _oTypographyFontSizeFromScale($scale, $progressive-font-adjust);
	}
}

@mixin _oTypographyProgressiveFontFallbackSize($font, $scale) {
	@if map-has-key($_o-typography-progressive-font-fallbacks, $font) {
		$font-config: map-get($_o-typography-progressive-font-fallbacks, $font);

		.#{$o-typography-loading-prefix}-#{$font} & {
			@include _oTypographyFontSize($scale, map-get($font-config, 'fallback-scale'));
		}
	}
}

@mixin oTypographySize($scale, $line-height: false, $progressive-font-adjust: 1) {
	@if type-of($scale) == map {
		@each $breakpoint, $scale in $scale {
			@include oGridRespondTo($breakpoint) {
				@if type-of($scale) == list {
					font-size: _oTypographyFontSizeFromScale(nth($scale, 1), $progressive-font-adjust);
					line-height: nth($scale, 2);
				} @else {
					font-size: _oTypographyFontSizeFromScale($scale, $progressive-font-adjust);
					line-height: _oTypographyLineHeightFromScale($scale, $line-height);
				}
			}
		}
	} @else {
		font-size: _oTypographyFontSizeFromScale($scale, $progressive-font-adjust);
		line-height: _oTypographyLineHeightFromScale($scale, $line-height);
	}
}

@mixin oTypographyProgressiveFontFallback($font, $scale) {
	@if map-has-key($_o-typography-progressive-font-fallbacks, $font) {

		$font-config: map-get($_o-typography-progressive-font-fallbacks, $font);

		.#{$o-typography-loading-prefix}-#{$font} & {
			@include _oTypographyFontSize($scale, map-get($font-config, 'fallback-scale'));
			font-family: map-get($font-config, 'fallback');
		}
	}
}

/// Outputs margin-top and/or margin-bottom based on multiples of
/// the baseline unit passed to the mixin
///
/// @param {Bool | Number} $top [false] - multiple of the baseline unit for top margin
/// @param {Bool | Number} $bottom [false] - multiple of the baseline unit for bottom margin
@mixin oTypographyMargin($top: false, $bottom: false) {
	@if $top {
		margin-top: oTypographySpacingSize($top);
	}

	@if $bottom {
		margin-bottom: oTypographySpacingSize($bottom);
	}
}

/// Outputs padding-top and/or padding-bottom based on multiples of
/// the baseline unit passed to the mixin
///
/// @param {Bool | Number} $top [false] - multiple of the baseline unit for top padding
/// @param {Bool | Number} $bottom [false] - multiple of the baseline unit for bottom padding
@mixin oTypographyPadding($top: false, $bottom: false) {
	@if $top {
		padding-top: oTypographySpacingSize($top);
	}

	@if $bottom {
		padding-bottom: oTypographySpacingSize($bottom);
	}
}

@mixin oTypographyBold($family: false) {
	@if $family == 'sans' {
		font-weight: 600;
	} @else {
		font-weight: 700;
	}
}
