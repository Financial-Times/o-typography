/// Returns a single list on the scale
///
/// @param {Number} $index - Number of the scale to return.
/// @param {String} $font [''] - The font to get the scale number for, as fonts may have different scales. Uses the default scale if not specified.
/// @returns {List} List of the requested scale value.
@function oTypographyGetScale($index: 0, $font: '') {
	$scale: map-get($_o-typography-font-scale-by-font, oFontsGetFontFamilyWithoutFallbacks($font));
	$scale: if(type-of($scale) == 'map', $scale, $o-typography-font-scale);
	@return map-get($scale, $index);
}

/// Returns the font-size value from the scale passed in
/// modified by the font-adjust if present
///
/// @param {Number} $scale - number of the scale to return
/// @param {Number} $font-adjust - multiplier if used as a progressive font
/// @param {String} $font [''] - The font to get the font size for, as fonts may have different scales. Uses the default scale if not specified.
/// @returns {Number} size in px
@function _oTypographyFontSizeFromScale($scale, $font-adjust: 1, $font: '') {
	$settings: oTypographyGetScale($scale, $font);
	@return (nth($settings, 1) * $font-adjust) * 1px;
}

/// Returns the line-height value from the scale passed in or
/// the line-height setting if one is passed
///
/// @param {Number} $scale - number of the scale to return
/// @param {Number} $line-height - size to output if not false
/// @param {String} $font [''] - The font to get the line height for, as fonts may have different scales. Uses the default scale if not specified.
/// @returns {Number} size in px
@function _oTypographyLineHeightFromScale($scale, $line-height, $font: '') {
	$settings: oTypographyGetScale($scale, $font);

	@if $line-height {
		@return $line-height;
	} @else {
		$line-height: nth($settings, 2);
		@return if($line-height, $line-height * 1px, null);
	}
}

/// Returns a spacing size in px based on the baseline unit and number of units
/// passed to the function
///
/// @param {Number} $units [0] - multiple of the baseline unit
/// @returns {Number} size in px
@function oTypographySpacingSize($units: 0) {
	@return ($units * $o-typography-baseline-unit) * 1px;
}

/// Returns a maximum line width based on the given scale
///
/// @param {Number} $scale - number of the scale to return
/// @param {Number} $optimal-characters-per-line - number of the characters per line
/// @param {String} $font [''] - The font to get the max line width for, as fonts may have different scales. Uses the default scale if not specified.
/// @returns {Number} maximum line width in px
@function oTypographyMaxLineWidth($scale: 0, $optimal-characters-per-line: 65, $font: '') {
	$settings: oTypographyGetScale($scale, $font);

	$font-size: nth($settings, 1) * 1px;
	$line-height: if(nth($settings, 2), nth($settings, 2) * 1px, $font-size);

	$golden-ratio: 1.618;
	$scale-ratio: ($font-size / $line-height)  + $golden-ratio; //adapts ratio to quirks in oTypography's line-heights

	@return $optimal-characters-per-line * ($font-size / $scale-ratio);
}

/// Get font family for family style i.e "sans", "serif", or "display".
///
/// @example
/// 	font-family: oTypographyGetFamily('sans')
///
/// @access private
/// @param {String} $family-style - One of 'sans', 'serif', or 'display'.
/// @return {String|List} The font-family set for the given font style.
@function _oTypographyFontFamilyForStyle($family-style) {
	$family-styles: ('sans', 'serif', 'display');
	@if not index($family-styles, $family-style) {
		@error 'Could not get the font-family for font of style "#{$family-style}", style must be one of "#{$family-styles}".';
	}
	@if $family-style == 'sans' {
		@return $o-typography-sans;
	}
	@if $family-style == 'serif' {
		@return $o-typography-serif;
	}
	@if $family-style == 'display' {
		@return $o-typography-display;
	}
}
